volumes:
  atuin_postgres:
  atuin-config:
  caddy-data:
  caddy-config:
  caddy-logs:
  freshrss_data:
  freshrss_extensions:
  loki:
  portainer:
  prometheus:

networks:
  loki:

secrets:
  glances_pw:
    file: /root/secrets/glances/collin.pwd

services:

  atuin:
    restart: always
    container_name: atuin
    image: ghcr.io/atuinsh/atuin:18.2.0
    command: server start
    volumes:
      - "atuin-config:/config"
    links:
      - atuin-db:db
    environment:
      ATUIN_HOST: "0.0.0.0"
      ATUIN_OPEN_REGISTRATION: "false"
      ATUIN_DB_URI: postgres://atuin:${ATUIN_POSTGRES_PASSWORD}@db/atuin

  atuin-db:
    image: postgres:14
    container_name: atuin-db
    restart: unless-stopped
    volumes:
      - "atuin_postgres:/var/lib/postgresql/data/"
    environment:
      POSTGRES_USER: atuin
      POSTGRES_PASSWORD: ${ATUIN_POSTGRES_PASSWORD}
      POSTGRES_DB: atuin

  caddy:
    build:
      context: caddy/vps
    container_name: caddy
    privileged: true
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    volumes:
      - caddy-data:/data
      - caddy-config:/config
      - caddy-logs:/var/log/caddy
      - /run/tailscale.nginx-auth.sock:/run/tailscale.nginx-auth.sock
    networks:
      - loki
      - default

  bash:
    image: bash
    container_name: bash
    network_mode: host
    command: ["bash", "-c", "while sleep 3600; do :; done"]

  freshrss:
    image: freshrss/freshrss:latest
    container_name: freshrss
    hostname: freshrss
    restart: unless-stopped
    logging:
      options:
        max-size: 10m
    volumes:
      - freshrss_data:/var/www/FreshRSS/data
      - freshrss_extensions:/var/www/FreshRSS/extensions
    environment:
      TZ: America/New_York
      CRON_MIN: '3,33'

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    build:
      context: homepage-vps
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  portainer:
    container_name: portainer
    hostname: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    volumes:
      - portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock

  prometheus:
    container_name: prometheus
    hostname: prometheus
    build:
      context: prometheus/vps
    restart: unless-stopped
    volumes:
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - "--storage.tsdb.retention.time=730d"
      - "--storage.tsdb.path=/prometheus/"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  loki:
    container_name: loki
    build:
      context: loki/vps
    restart: unless-stopped
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - loki:/loki
    networks:
      - loki

  promtail:
    container_name: promtail
    build:
      context: promtail/vps
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - caddy-logs:/var/log/caddy
    command: -config.file=/etc/promtail/config.yml
    networks:
      - loki

  # port: 3000
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_DEFAULT_INSTANCE_NAME=5xx.engineer
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SECURITY_ADMIN_USER=${VPS_GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${VPS_GRAFANA_ADMIN_PASSWORD}
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    networks:
      - loki

  glances:
    container_name: glances
    image: nicolargo/glances:latest-full
    restart: unless-stopped
    pid: host
    secrets:
      - source: glances_pw
        target: /root/.config/glances/glances.pwd
    environment:
      GLANCES_OPT: "-w --password"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
